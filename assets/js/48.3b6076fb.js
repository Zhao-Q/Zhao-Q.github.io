(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{515:function(t,r,e){"use strict";e.r(r);var a=e(45),o=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"aop-和-ioc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aop-和-ioc"}},[t._v("#")]),t._v(" AOP 和 IOC")]),t._v(" "),e("blockquote",[e("p",[t._v("AOP和IOC是Spring的两大核心")])]),t._v(" "),e("h3",{attrs:{id:"一、aop-面向切面编程-aspect-oriented-programming"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、aop-面向切面编程-aspect-oriented-programming"}},[t._v("#")]),t._v(" 一、AOP(面向切面编程, Aspect Oriented Programming)")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("AOP建立了一种横向的开发方式。对于日志、权限认证、事务等业务功能都需要的功能，若采用OOP的设计则会产生大量的重复代码，不利于各模块的重用。")])]),t._v(" "),e("li",[e("p",[t._v("AOP把系统分为 "),e("code",[t._v("核心关注点")]),t._v("和"),e("code",[t._v("横切关注点")]),t._v("。")]),t._v(" "),e("ul",[e("li",[t._v("业务的核心处理流程为核心关注点，与之相对的诸如上面提到的权限认证、日志、事务等则为横切关注点。")]),t._v(" "),e("li",[t._v("AOP思想的作用在于分离系统中的各种关注点，进一步解耦模块间的相互依赖，提高模块的重用性。")])])])]),t._v(" "),e("h4",{attrs:{id:"日志切面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日志切面"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"./LogAspect"}},[t._v("日志切面")])]),t._v(" "),e("h3",{attrs:{id:"二、ioc-控制反转-inversion-of-controll"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、ioc-控制反转-inversion-of-controll"}},[t._v("#")]),t._v(" 二、IOC(控制反转, Inversion of Controll)")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("由Spring来负责控制对象的生命周期和对象间的相互关系。通常，在实现一个业务逻辑时需要多个对象相互协作来完成，每个对象在使用它的协作对象时都要通过new Obeject()的方式来创建，这样加大了对象间的耦合程度。")])]),t._v(" "),e("li",[e("p",[t._v("对这些相互依赖对象的创建和协调工作都交由Spring容器来实现，当某个对象需要其他协作对象时，由Spring动态的通过依赖注入(DI, Dependency Injection)的方式来提供协作对象，其只需要关注业务本身的逻辑即可。")])])])])}),[],!1,null,null,null);r.default=o.exports}}]);